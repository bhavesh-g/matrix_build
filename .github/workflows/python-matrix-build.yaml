# .github/workflows/python-matrix-build.yml
name: Multi-Python Build Matrix

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  FORCE_COLOR: 1

jobs:
  setup:
    name: Setup Build Matrix
    runs-on: ubuntu-latest
    outputs:
      python-versions: ${{ steps.set-versions.outputs.matrix }}
      incompatible-versions: ${{ steps.set-versions.outputs.failures }}
      build-name: ${{ steps.set-info.outputs.name }}
    steps:
      - name: Determine Python Versions and Incompatibilities
        id: set-versions
        run: |
          # Versions to test (expand as desired)
          echo 'matrix=["3.7","3.8","3.9","3.10","3.11","3.12","3.13-dev"]' >> "$GITHUB_OUTPUT"
          # Versions expected to fail intentionally (<3.10 due to pattern matching)
          echo 'failures=["3.7","3.8","3.9"]' >> "$GITHUB_OUTPUT"

      - name: Set Build Information
        id: set-info
        run: |
          echo "name=build-$(date +'%Y%m%d-%H%M%S')" >> "$GITHUB_OUTPUT"

  build:
    name: Python ${{ matrix.python-version }}
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 8
      matrix:
        python-version: ${{ fromJson(needs.setup.outputs.python-versions) }}
    # Intentional failures and dev builds must not fail the workflow
    continue-on-error: ${{ contains(fromJson(needs.setup.outputs.incompatible-versions), matrix.python-version) || matrix.python-version == '3.13-dev' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Application (import test)
        id: build-app
        run: |
          python - << 'EOF'
          from app.main import app
          print("Imported app:", bool(app))
          print("Routes:", len(app.routes))
          EOF

      - name: Version Compatibility Check
        id: compat
        run: |
          python - << 'EOF'
          import sys
          if sys.version_info < (3, 10):
              raise SystemExit("Intentional incompatibility: requires Python >= 3.10")
          print("Compatible Python:", sys.version)
          EOF

      - name: Runtime Smoke Test
        id: runtime
        if: steps.build-app.outcome == 'success' && steps.compat.outcome == 'success'
        run: |
          timeout 10s python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 3
          curl -f http://localhost:8000/ || exit 1
          curl -f http://localhost:8000/pattern-match || exit 1
          pkill -f uvicorn || true

      - name: Write Compatibility Status
        if: always()
        run: |
          status="incompatible"
          if [ "${{ steps.build-app.outcome }}" = "success" ] && [ "${{ steps.compat.outcome }}" = "success" ] && [ "${{ steps.runtime.outcome }}" = "success" ]; then
            status="compatible"
          fi
          echo "$status" > "status_${{ matrix.python-version }}.txt"

      - name: Upload Status Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: status-${{ matrix.python-version }}
          path: status_${{ matrix.python-version }}.txt
          if-no-files-found: warn

  summary:
    name: Compatibility Summary
    needs: [setup, build]
    runs-on: ubuntu-latest
    if: always()
    outputs:
      compatible: ${{ steps.compute.outputs.compatible }}
      incompatible: ${{ steps.compute.outputs.incompatible }}
    steps:
      - name: Download All Status Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: status-*
          merge-multiple: true

      - name: Compute Compatibility Lists
        id: compute
        env:
          VERSIONS_JSON: ${{ needs.setup.outputs.python-versions }}
        run: |
          python - << 'PY'
          import json, os
          versions = json.loads(os.environ["VERSIONS_JSON"])
          compatible, incompatible = [], []
          for v in versions:
            fn = f"status_{v}.txt"
            if os.path.exists(fn):
              try:
                with open(fn, "r", encoding="utf-8") as f:
                  if f.read().strip() == "compatible":
                    compatible.append(v)
                  else:
                    incompatible.append(v)
              except Exception:
                incompatible.append(v)
            else:
              incompatible.append(v)
          # Emit outputs
          print("Compatible:", " ".join(compatible))
          print("Incompatible:", " ".join(incompatible))
          with open(os.environ["GITHUB_OUTPUT"], "a", encoding="utf-8") as out:
            out.write(f"compatible={' '.join(compatible)}\n")
            out.write(f"incompatible={' '.join(incompatible)}\n")
          PY

      - name: Output Compatibility Report
        run: |
          echo "Compatible Python versions: ${{ steps.compute.outputs.compatible }}"
          echo "Incompatible Python versions: ${{ steps.compute.outputs.incompatible }}"
          {
            echo "# Compatibility Report"
            echo ""
            echo "**Compatible Python versions:** ${{ steps.compute.outputs.compatible }}"
            echo ""
            echo "**Incompatible Python versions (intentional or failed):** ${{ steps.compute.outputs.incompatible }}"
          } >> "$GITHUB_STEP_SUMMARY"
